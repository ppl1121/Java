import java.util.ArrayList;

import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.StdDraw;
import edu.princeton.cs.algs4.StdOut;

public class BruteCollinearPoints {
	
	private Point[] internalpoints;
	private ArrayList<LineSegment> result;
	
	public BruteCollinearPoints(Point[] points){
		if(points == null){
			throw new java.lang.IllegalArgumentException();
		}
		for(Point temp : points){
			if (temp == null){
				throw new java.lang.IllegalArgumentException();
			}
		}
		for(int i=0;i<points.length;i++){
			for(int j=0; j<points.length;j++){
				if(j!=i){
					if(points[j].compareTo(points[i])==0){
						throw new java.lang.IllegalArgumentException();
					}
				}
			}
		}
			
		internalpoints = points;
		result = new ArrayList<LineSegment>();
	}
	
	// the number of line segments
	public int numberOfSegments(){
		segments();
		return result.size();		
	}
	
	// the line segments
	public LineSegment[] segments(){
		for(int i=0; i<internalpoints.length;i++){
			for(int j=0; j<internalpoints.length;j++){
				for(int m=0; m<internalpoints.length;m++){
					for(int n=0; n<internalpoints.length;n++){
						if(i!=j && i!=m && i!=n && j!=m && j!=n && m!=n){
							if((internalpoints[i].slopeTo(internalpoints[j]) - internalpoints[i].slopeTo(internalpoints[m]) == 0.0) && (internalpoints[i].slopeTo(internalpoints[j]) - internalpoints[i].slopeTo(internalpoints[n])) == 0.0){
								if(internalpoints[i].compareTo(internalpoints[j])<0 && internalpoints[j].compareTo(internalpoints[m])<0 && internalpoints[m].compareTo(internalpoints[n])<0){
									result.add(new LineSegment(internalpoints[i],internalpoints[n]));
								}
							}
						}
					}
				}
			}			
		}
		LineSegment[] temp = new LineSegment[result.size()];
		return result.toArray(temp);
	}
	
//	public static void main(String[] args) {
//
//	    // read the n points from a file
//	    In in = new In(args[0]);
//	    int n = in.readInt();
//	    Point[] points = new Point[n];
//	    for (int i = 0; i < n; i++) {
//	        int x = in.readInt();
//	        int y = in.readInt();
//	        points[i] = new Point(x, y);
//	    }
//
//	    // draw the points
//	    StdDraw.enableDoubleBuffering();
//	    StdDraw.setXscale(0, 32768);
//	    StdDraw.setYscale(0, 32768);
//	    for (Point p : points) {
//	        p.draw();
//	    }
//	    StdDraw.show();
//
//	    // print and draw the line segments
//	    BruteCollinearPoints collinear = new BruteCollinearPoints(points);
//	    for (LineSegment segment : collinear.segments()) {
//	        StdOut.println(segment);
//	        segment.draw();
//	    }
//	    StdDraw.show();
//
//	}
}
