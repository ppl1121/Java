import java.util.Iterator;


public class Deque<Item> implements Iterable<Item> {
	
	// size of Deque
	private int n;          
    
	// head and tail of Deque
	private Node head, tail;     
	
	// helper linked list class
    private class Node {
        private Item item;
        private Node previous;
        private Node next;
    }
	
   // construct an empty deque
   public Deque(){
	   head = null;
	   tail = null;
	   n = 0;   
   }
   
   // is the deque empty?
   public boolean isEmpty(){
	   return n==0;
   }
   
   // return the number of items on the deque
   public int size(){
	   return n;
   }
   
   // add the item to the front
   public void addFirst(Item item){
	   if(item == null){
		   throw new java.lang.NullPointerException();
	   }
	   Node oldhead = head;
	   head = new Node();
	   head.item = item;
	   head.next = oldhead;
	   head.previous = null;
	   if(tail == null){
		   tail = head;
	   }
	   else{
		   oldhead.previous = head;
	   }
	   n++;
   }
   
   // add the item to the end
   public void addLast(Item item){
	   if(item == null){
		   throw new java.lang.NullPointerException();
	   }
	   Node oldtail = tail;
	   tail = new Node();
	   tail.item = item;
	   tail.previous = oldtail;
	   tail.next = null;
	   if(head == null){
		   head = tail;
	   }
	   else{
		   oldtail.next = tail;
	   }
	   n++;   
   }
   
   // remove and return the item from the front
   public Item removeFirst(){
	   if(isEmpty()){
		   throw new java.util.NoSuchElementException();
	   }
	   Item item =  head.item;
	   head = head.next;
	   if(head == null){
		   tail = head;
	   }
	   else{
		   head.previous = null; 
	   }
	   n--;
	   return item; 
   }
   
   // remove and return the item from the end
   public Item removeLast(){
	   if(isEmpty()){
		   throw new java.util.NoSuchElementException();
	   }
	   Item item =  tail.item;
	   tail = tail.previous;
	   if(tail == null){
		   head = tail;
	   }
	   else{
		   tail.next = null;
	   }
	   n--;
	   return item;
	   
   }
   
   // return an iterator over items in order from front to end
   public Iterator<Item> iterator(){
	   return new ListIterator();   
   }
   
   // an iterator, doesn't implement remove()
   private class ListIterator implements Iterator<Item>{
	   private Node current;
	   
	   public ListIterator(){
		   current = head;
	   }

		@Override
		public boolean hasNext() {
			return current != null;
		}

		@Override
		public Item next() {
			if(! hasNext()){
				throw new java.util.NoSuchElementException();
			}
			Item item = current.item;
			current = current.next;
			return item;
		}

		@Override
		public void remove() {
			throw new java.lang.UnsupportedOperationException(); 		
		}   
   }
   
   // unit testing (optional)
   public static void main(String[] args){
	   
   }
}