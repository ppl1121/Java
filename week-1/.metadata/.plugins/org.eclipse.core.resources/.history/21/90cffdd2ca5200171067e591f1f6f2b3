import edu.princeton.cs.algs4.StdRandom;
import edu.princeton.cs.algs4.StdStats;
import edu.princeton.cs.algs4.WeightedQuickUnionUF;

public class PercolationStats {
	
	private int size;
	private int NumberOfTrials;
	private double[] results;
	private Percolation perc;
		
	// perform trials independent experiments on an n-by-n grid
	public PercolationStats(int n, int trials){
		if(n <=0 || trials <= 0){
			throw new java.lang.IllegalArgumentException();
		}
		size = n;
		NumberOfTrials = trials;
		results = new double[NumberOfTrials];
		perc = new Percolation(size);
		
		int row,col;
		for(int i=0;i<NumberOfTrials;i++){
			while(!perc.percolates()){
				row = StdRandom.uniform(1, size+1);
				col = StdRandom.uniform(1, size+1);
				perc.open(row, col);
			}
			results[i] = (double)perc.numberOfOpenSites()/size*size;
		}	
		
	}
	
	// sample mean of percolation threshold
	public double mean(){
		return StdStats.mean(results);
	}
	
	// sample standard deviation of percolation threshold
	public double stddev(){
		if(NumberOfTrials==1){
			return Double.NaN;
		}
		else{
			return StdStats.stddevp(results);
		}
	}
	
	// low  endpoint of 95% confidence interval
	public double confidenceLo(){
		return mean()-1.96/Math.sqrt((double)NumberOfTrials);
	}
	
	// high endpoint of 95% confidence interval
	public double confidenceHi(){
		return mean()+1.96/Math.sqrt((double)NumberOfTrials);
	}


	public static void main(String[] args) {

	}

}
