import java.util.ArrayList;

import edu.princeton.cs.algs4.Point2D;
import edu.princeton.cs.algs4.Queue;
import edu.princeton.cs.algs4.RectHV;
import edu.princeton.cs.algs4.SET;
import edu.princeton.cs.algs4.StdDraw;

public class PointSET {
	
	private SET<Point2D> set;
	
	// construct an empty set of points 
	public PointSET(){
		set = new SET<Point2D>();
	}
	
	// is the set empty? 
	public boolean isEmpty(){
		return  set.isEmpty();
	}
	
	// number of points in the set 
	public int size(){
		return set.size();
	}
	
	// add the point to the set (if it is not already in the set)
	public void insert(Point2D p){
		set.add(p);;
	}
	
	// does the set contain point p? 
	public boolean contains(Point2D p){
		return set.contains(p);
	}
	
	// draw all points to standard draw 
	public void draw(){
		StdDraw.setPenColor(StdDraw.BLACK);
		StdDraw.setPenRadius(0.01);
		for(Point2D p : set){
			p.draw();
		}
	}
	
	// all points that are inside the rectangle 
	public Iterable<Point2D> range(RectHV rect){
		ArrayList<Point2D> result = new ArrayList<Point2D>(); 
		for(Point2D p : set){
			if(rect.distanceSquaredTo(p)==0){
				result.add(p);
			}
		}
		return result;
	}
	
	// a nearest neighbor in the set to point p; null if the set is empty 
	public Point2D nearest(Point2D p){
		if(set.isEmpty()) return null;
		Point2D nearest_point;
		double nearest_distance = 1;
		for(Point2D point : set){
			double distance = point.distanceSquaredTo(p);
			if(distance<nearest_distance){
				nearest_point = point;
				nearest_distance = distance;	
			}
		}
		return nearest_point;
		
	}
	
	// unit testing of the methods (optional) 
	public static void main(String[] args){
		
	}

}
