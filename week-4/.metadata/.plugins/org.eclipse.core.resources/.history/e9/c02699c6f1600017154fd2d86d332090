import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.MinPQ;
import edu.princeton.cs.algs4.Stack;
import edu.princeton.cs.algs4.StdOut;

public class Solver {
	private final boolean solvable = false;
	private final int moves = -1;
	private final MinPQ<SearchNode> pq;
	private final Stack<Board> stack;
	
	private class SearchNode implements Comparable<SearchNode> {
		private final Board board;
		private final int moves;
		private final SearchNode previous;
		private final int manhattan;
		private final boolean istwin;
		
		SearchNode(Board board, int moves, SearchNode previous, boolean istwin){
			this.board = board;
			this.moves = moves;
			this.previous = previous;
			this.istwin = istwin;
			this.manhattan = this.board.manhattan() + this.moves;
		}

		public int compareTo(SearchNode that) {
			if(this.manhattan == that.manhattan) return 0;
			if(this.manhattan > that.manhattan) return 1;
			return -1;
		}		
	}
	
	// find a solution to the initial board (using the A* algorithm)
	public Solver(Board initial){
		if(initial==null) throw new  java.lang.IllegalArgumentException();
		boolean local_solvable = false;
		int local_moves = -1;
		MinPQ<SearchNode> local_pq = new MinPQ<SearchNode>();
		Stack<Board> local_stack = new Stack<Board>();
		SearchNode inital_SearchNode = new SearchNode(initial,0,null,false);
		SearchNode inital_SearchNodeTwin = new SearchNode(initial.twin(),0,null,true);
		local_pq.insert(inital_SearchNode);
		local_pq.insert(inital_SearchNodeTwin);
		while(true){
			SearchNode out = local_pq.delMin();
			if(out.board.isGoal()){
				if(out.istwin){
					solvable = false;
					moves = -1;
				}
				else{
					solvable = true;
					moves = out.moves;
					while(out!=null){
						local_stack.push(out.board);
						out = out.previous;
					}
				}
				break;
			}
			else{
				for(Board neighbour:out.board.neighbors()){
					if(out.previous==null || !neighbour.equals(out.previous.board)){
						local_pq.insert(new SearchNode(neighbour,out.moves+1,out,out.istwin));
					}
				}
			}
		}
		
	}
	
	// is the initial board solvable?
	public boolean isSolvable(){
		return solvable;
	}
	
	// min number of moves to solve initial board; -1 if unsolvable
    public int moves(){
    	return moves;
    }
    
    // sequence of boards in a shortest solution; null if unsolvable
    public Iterable<Board> solution(){
    	if(solvable) return stack;
    	else return null;
    	
    }
    
    // solve a slider puzzle (given below)
    public static void main(String[] args){
    	// create initial board from file
        In in = new In(args[0]);
        int n = in.readInt();
        int[][] blocks = new int[n][n];
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                blocks[i][j] = in.readInt();
        Board initial = new Board(blocks);

        // solve the puzzle
        Solver solver = new Solver(initial);

        // print solution to standard output
        if (!solver.isSolvable())
            StdOut.println("No solution possible");
        else {
            StdOut.println("Minimum number of moves = " + solver.moves());
            for (Board board : solver.solution())
                StdOut.println(board);
        }
    }
	

}
